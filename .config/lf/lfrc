# interpreter for shell commands
set shell zsh

# Border around columns
set drawbox

# Smartcase
set smartcase

# Incsearch
set incsearch

# Preview
set preview

# LF image previewer
#set previewer ~/.config/lf/previewer.sh
#set cleaner ~/.config/lf/clear_img.sh

# Alias from lf to lfwrapper.sh
#alias lf=lfwrapper.sh



# set '-eu' options for shell commands
# These options are used to ave safer shell commands. Option '-e' is used to exit on
# error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansions which can be useful when $f, $fs, and $fx 
# variables contain names with '*' or '?' characters. However, this option is used 
# selectively within individual commands as it can be limimting at times. 
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands this is useful
# to automatically split file names in $fs and $fx properly since default file
# separators used in these variables (i.e. 'filesep' option) is newline. you need
# to consider the values of these options and create your commands accordingly.
set ifs "\n"

# leave some space at the top and pottom of the screen
set scrolloff 8

# Extra options at github.com/gokcehan/lf/wiki/Tips
#	Make backups with MV and CP
#

# Use Rsync and show progress for file copying
cmd paste %{{
	set -- $(cat ~/.local/share/lf/files)
	mode="$1"
	shift
	case "$mode" in
		copy)
			rsync -avP --ignore-existing -- "$@" . |
			stdbuf -i0 -o0 -e0 tr '\r' '\n' |
			while IFS= read -r line; do
				lf -remote "send $id echo $line"
			done
			;;
													move) mv -n -- "$@" .;;
	esac
	rm ~/.local/share/lf/files
	lf -remote "send clear"
}} 


# Command/Mapping to touch a new file
cmd touch %touch "$@"
map t push :touch<space>

# Command/Mapping to create new directories, includes -p
cmd mkdir %{{
	IFS=" "
	mkdir -p -- "$*"
#	UNCOMMENT BELOW TO AUTOMATICALLY MOVE TO THE DIRECTORY
#	lf -remote "send $id select \"$*\""
}}
# map mkdir to "a"
	 map a push :mkdir<space>

# Custom Delete Cmd
cmd delete ${{
     set -f
     printf "$fx\n"
     printf "delete?[yes/no]"
     read ans
     [ $ans = "yes" ] && rm -rf $fx
}}
# map delete to "D"
	 map D push :delete<space>


# Create hard/symbolic, P is used for both
# y (select for copy) and P to paste soft-link
# d (select for cut) and P to paste hard-link
 cmd link %{{
     set -- $(cat ~/.local/share/lf/files)
     mode="$1"
     shift
     	if [ "$#" -lt 1 ]; then
	     lf -remote "send $id echo no files to link"
   		exit 0
	fi
	case "$mode" in
# symbolically copy mode is indicating a soft link
		copy) ln -sr -t . -- "$@";;
# while a move mode is indicating a hard link
       		move) ln -t . -- "$@";;
	esac
	rm ~/.local/share/lf/files
	lf -remote "send clear"
}}
# Map link to "P"
map P :link







# execute current file (must be executable)
#map x $$f
#map X !$f

# dedicated keys for file opener actions
#map o $mimeopen $f
#map O $mimeopen --ask $f


# Icons
set icons true
source iconslf

